<Project Sdk="Microsoft.NET.Sdk">
    <PropertyGroup>
        <OutputType>WinExe</OutputType>
        <TargetFramework>net6.0</TargetFramework>
        <Nullable>enable</Nullable>
        <RootNamespace>GuitarConfiguratorSharp.NetCore</RootNamespace>
        <AvaloniaVersion>0.10.12</AvaloniaVersion>
        <IncludeNativeLibrariesForSelfExtract>true</IncludeNativeLibrariesForSelfExtract>
        <!--Avalonia doesen't support TrimMode=link currently,but we are working on that https://github.com/AvaloniaUI/Avalonia/issues/6892 -->
        <TrimMode>copyused</TrimMode>
        <BuiltInComInteropSupport>true</BuiltInComInteropSupport>
        <EnableCompressionInSingleFile>true</EnableCompressionInSingleFile>
        <PublishReadyToRun>true</PublishReadyToRun>
        <DefineConstants Condition="'$([System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform($([System.Runtime.InteropServices.OSPlatform]::Windows)))' == 'true'">Windows</DefineConstants>
        <DefineConstants Condition="'$([System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform($([System.Runtime.InteropServices.OSPlatform]::Linux)))' == 'true'">POSIX</DefineConstants>
        <LangVersion>preview</LangVersion>
    </PropertyGroup>
    <ItemGroup>
        <!--This helps with theme dll-s trimming.
        If you will publish your application in self-contained mode with p:PublishTrimmed=true and it will use Fluent theme Default theme will be trimmed from the output and vice versa.
        https://github.com/AvaloniaUI/Avalonia/issues/5593 -->
        <TrimmableAssembly Include="Avalonia.Themes.Fluent" />
        <TrimmableAssembly Include="Avalonia.Themes.Default" />
    </ItemGroup>
    <ItemGroup>
        <AvaloniaResource Include="Assets\**" />
    </ItemGroup>
    <ItemGroup>
        <PackageReference Include="Avalonia.Desktop" Version="11.0.0-preview3" />
        <!--Condition below is needed to remove Avalonia.Diagnostics package from build output in Release configuration.-->
        <PackageReference Condition="'$(Configuration)' == 'Debug'" Include="Avalonia.Diagnostics" Version="11.0.0-preview3" />
        <PackageReference Include="Avalonia.ReactiveUI" Version="11.0.0-preview3" />
        <PackageReference Include="Avalonia.Themes.Fluent" Version="11.0.0-preview3" />
        <PackageReference Include="AvaloniaColorPicker" Version="1.3.4" />
        <PackageReference Include="Dahomey.Json" Version="1.12.2" />
        <PackageReference Include="HidSharp" Version="2.1.0" />
        <PackageReference Include="ini-parser-netstandard" Version="2.5.2" />
        <PackageReference Include="LibUsbDotNet" Version="2.2.29" />
        <PackageReference Include="Live.Avalonia" Version="1.3.1" />
        <PackageReference Include="Mono.Posix.NETStandard" Version="5.20.1-preview" />
        <PackageReference Include="protobuf-net" Version="3.1.25" />
        <PackageReference Include="SharpZipLib" Version="1.4.0" />
        <PackageReference Include="System.IO.Ports" Version="7.0.0-rc.2.22472.3" />
        <PackageReference Include="SemanticVersioning" Version="2.0.2" />
        <PackageReference Include="System.Text.Json" Version="7.0.0-rc.2.22472.3" />
    </ItemGroup>
    <ItemGroup>
      <Content Include="Assets\Icons\Readme.txt" />
    </ItemGroup>
    <ItemGroup>
      <Compile Update="Views\UnoShortWindow.axaml.cs">
        <DependentUpon>UnoShortWindow.axaml</DependentUpon>
        <SubType>Code</SubType>
      </Compile>
      <Compile Update="Views\RaiseIssueWindow.axaml.cs">
        <DependentUpon>RaiseIssueWindow.axaml</DependentUpon>
        <SubType>Code</SubType>
      </Compile>
    </ItemGroup>
    <ItemGroup>
      <Reference Include="Avalonia.Themes.Fluent">
        <HintPath>..\..\.nuget\packages\avalonia\0.10.12\lib\netcoreapp2.0\Avalonia.Themes.Fluent.dll</HintPath>
      </Reference>
    </ItemGroup>
    <Target Name="PostBuild" AfterTargets="PostBuildEvent" Condition="'$(RuntimeIdentifier)' == ''">
        <Copy SourceFiles="$(TargetDir)\runtimes\unix\lib\net6.0\System.IO.Ports.dll" DestinationFolder="$(TargetDir)" Condition="'$(OS)' != 'Windows_NT' " />
        <Copy SourceFiles="$(TargetDir)\runtimes\win\lib\net6.0\System.IO.Ports.dll" DestinationFolder="$(TargetDir)" Condition="'$(OS)' == 'Windows_NT' " />
    </Target>
    <Target Name="ZipOutputPath" AfterTargets="BeforeBuild">
        <ZipDirectory SourceDirectory="$(MSBuildProjectDirectory)\firmware" DestinationFile="$(MSBuildProjectDirectory)\Assets\firmware.zip" Overwrite="true" />
    </Target>
</Project>

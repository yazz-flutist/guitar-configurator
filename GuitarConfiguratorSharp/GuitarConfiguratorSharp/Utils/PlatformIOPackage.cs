// Generated by https://quicktype.io
//
// To change quicktype's target language, run command:
//
//   "Set quicktype target language"

namespace GuitarConfiguratorSharp.Utils
{
    using System;
    using System.Collections.Generic;
    using System.Text.Json;

    using System.Globalization;
    using System.Text;

    public partial class PlatformIOPackage
    {

        public long Id { get; set; }

        public string Type { get; set; }

        public string Tier { get; set; }

        public Owner Owner { get; set; }

        public string Name { get; set; }

        public string Description { get; set; }

        public DateTimeOffset AddedAt { get; set; }

        public DateTimeOffset UpdatedAt { get; set; }

        public DateTimeOffset ModifiedAt { get; set; }

        public long DownloadsTrend { get; set; }

        public long PopularityTrend { get; set; }

        public long PopularityRank { get; set; }

        public long OpenIssuesCount { get; set; }

        public long StarsCount { get; set; }

        public long ExamplesCount { get; set; }

        public object Title { get; set; }

        public string License { get; set; }

        public Uri Homepage { get; set; }

        public Uri RepositoryUrl { get; set; }

        public string[] Keywords { get; set; }

        public Author[] Authors { get; set; }

        public Version Version { get; set; }

        public Version[] Versions { get; set; }

        public object ReadmeUrl { get; set; }

        public long DependenciesCount { get; set; }

        public long DependentsCount { get; set; }

        public object[] TopDependencies { get; set; }

        public object[] TopDependents { get; set; }
    }

    public partial class Author
    {
        public Uri Url { get; set; }

        public string Name { get; set; }
    }

    public partial class Owner
    {
        public string Username { get; set; }

        public string Firstname { get; set; }

        public object Lastname { get; set; }

        public bool IsOrg { get; set; }
    }

    public partial class Version
    {
        public long Id { get; set; }

        public string Name { get; set; }

        public long UnpackedSize { get; set; }

        public DateTimeOffset ReleasedAt { get; set; }

        public File[] Files { get; set; }

        public bool IsLatest { get; set; }
    }

    public partial class File
    {
        public string Name { get; set; }

        public long Size { get; set; }

        public Checksum Checksum { get; set; }

        public string[] System { get; set; }

        public Uri DownloadUrl { get; set; }
    }

    public partial class Checksum
    {
        public string Sha256 { get; set; }
    }
    
    public class SnakeCaseNamingPolicy : JsonNamingPolicy
{
    public static SnakeCaseNamingPolicy Instance { get; } = new SnakeCaseNamingPolicy();

    internal enum SnakeCaseState
        {
            Start,
            Lower,
            Upper,
            NewWord
        }

        public override string ConvertName(string name)
        {
            if (string.IsNullOrEmpty(name))
            {
                return name;
            }

            var sb = new StringBuilder();
            var state = SnakeCaseState.Start;

            var nameSpan = name.AsSpan();

            for (int i = 0; i < nameSpan.Length; i++)
            {
                if (nameSpan[i] == ' ')
                {
                    if (state != SnakeCaseState.Start)
                    {
                        state = SnakeCaseState.NewWord;
                    }
                }
                else if (char.IsUpper(nameSpan[i]))
                {
                    switch (state)
                    {
                        case SnakeCaseState.Upper:
                            bool hasNext = (i + 1 < nameSpan.Length);
                            if (i > 0 && hasNext)
                            {
                                char nextChar = nameSpan[i + 1];
                                if (!char.IsUpper(nextChar) && nextChar != '_')
                                {
                                    sb.Append('_');
                                }
                            }
                            break;
                        case SnakeCaseState.Lower:
                        case SnakeCaseState.NewWord:
                            sb.Append('_');
                            break;
                    }
                    sb.Append(char.ToLowerInvariant(nameSpan[i]));
                    state = SnakeCaseState.Upper;
                }
                else if (nameSpan[i] == '_')
                {
                    sb.Append('_');
                    state = SnakeCaseState.Start;
                }
                else
                {
                    if (state == SnakeCaseState.NewWord)
                    {
                        sb.Append('_');
                    }

                    sb.Append(nameSpan[i]);
                    state = SnakeCaseState.Lower;
                }
            }

            return sb.ToString();
        }
}


    public partial class PlatformIOPackage
    {
        public static PlatformIOPackage FromJson(string json)
        {
            var serializeOptions = new JsonSerializerOptions
            {
                PropertyNamingPolicy = new SnakeCaseNamingPolicy(),
                WriteIndented = true
            };
            return JsonSerializer.Deserialize<PlatformIOPackage>(json, serializeOptions);
        }
    }
}
